# The solution to the `Working Practice` exercise. Re-wiring the PingSource component to use
# a Broker and Trigger to transmit the events.

apiVersion: eventing.knative.dev/v1
kind: Broker
metadata:
    name: default

---

# Replace the values wraped in `<>` with your values
apiVersion: v1
kind: Secret
metadata:
  name: aws
type: Opaque
stringData:
  aws_access_key_id: <your-aws-access-key-id>
  aws_secret_access_key: <your-aws-secret-access-key>


---

apiVersion: sources.triggermesh.io/v1alpha1
kind: AWSSQSSource
metadata:
  name: sample
spec:
  arn: <your-arn>
  auth:
    credentials:
      accessKeyID:
        valueFromSecret:
          name: awscreds
          key: aws_access_key_id
      secretAccessKey:
        valueFromSecret:
          name: awscreds
          key: aws_secret_access_key
  sink:
    ref:
      apiVersion: eventing.knative.dev/v1
      kind: Broker
      name: default

---

apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: sockeye
spec:
  broker: default
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: sockeye

---

# Get the Sockeye event viewer URL using this command:
# kubectl get ksvc sockeye -o=jsonpath='{.status.url}'

apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: sockeye
spec:
  template:
    spec:
      containers:
        - image: docker.io/n3wscott/sockeye:v0.7.0@sha256:e603d8494eeacce966e57f8f508e4c4f6bebc71d095e3f5a0a1abaf42c5f0e48
